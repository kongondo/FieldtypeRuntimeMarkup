<?php

/**
* InputfieldRuntimeMarkup for ProcessWire.
*
* This Inputfield is a GUI for FieldtypeRuntimeMarkup.
*
* Note that this is a runtime-only field and can't be queried via selectors since its value
* only exists at runtime. Nothing is saved to the database
*
* @author Kongondo <kongondo@gmail.com>
* @sponsored by Andrey Valiev
*
* Lincensed under GNU/GPL v2.
*
* https://github.com/kongondo/FieldtypeRuntimeMarkup
* Created August 2015
* 
* ProcessWire 2.x
* Copyright (C) 2011 by Ryan Cramer
* Licensed under GNU/GPL v2, see LICENSE.TXT
*
* http://www.processwire.com
*
*/

class InputfieldRuntimeMarkup extends Inputfield {

	public static function getModuleInfo() {
		return array(
			'title' => 'RuntimeMarkup',
			'author' => 'Kongondo',
			'version' => 001,
			'href' => 'https://processwire.com/talk/topic/',
			'summary' => 'Allows rendering of custom markup within page editor via custom PHP snippet set in the field.',
			'requires' => 'FieldtypeRuntimeMarkup', 
			);
	}

	/**
	 * Render the entire input area for a Valan
	 *
	 */
	public function ___render() {

		//if code field is empty return early
		if(!$this->runtimeFields) return;

		//so that $page and $pages are locally scoped to the eval
		$process = $this->wire('process'); 
		if($process && $process->className() == 'ProcessPageEdit') $page = $process->getPage();

		$pages = $this->wire('pages');

		$str = eval($this->runtimeFields);

		//since we are dealing with custom PHP code but also want to make sure that only markup is returned
		//if eval() returns anything other than a string or an integer, we throw an error (e.g. if an object or array is returned)
		if (is_string($str) || is_int($str)) return $str;
		else return $this->error($this->_('Only strings and integers should be returned by your custom code! Check if your code is valid.'));

	}
	
	/**
	 * Process input for the values sent from this field
	 *
	 */
	/*public function ___processInput(WireInputData $input) {

		//nothing to do here
		//no values sent

	}*/



}

